{"version":3,"file":"static/js/986.4f13c05b.chunk.js","mappings":"0PAEaA,EAAYC,EAAAA,EAAAA,QAAH,oJAGb,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,MAAM,EAAtB,IACM,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,MAAM,EAAtB,IACN,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,MAAM,EAAtB,I,GAGGH,EAAAA,EAAAA,IAAH,2HACZ,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,MAAM,EAAtB,IACE,SAAAF,GAAK,OAAIA,EAAMC,MAAMC,MAAM,EAAtB,I,QCPXC,EAAY,SAAC,GAAU,IAATC,EAAQ,EAARA,GACzB,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAQA,OANEC,EAAAA,EAAAA,YAAU,YACVC,EAAAA,EAAAA,IAAaL,GAAIM,MAAK,SAAAC,GACtBJ,EAASI,EACV,GACE,GAAE,CAACP,IAGHE,IAAU,UAACR,EAAD,YACT,gBAAKc,IAAG,0CAAqCN,EAAMO,aAAeC,IAAI,GAAGC,OAAO,SAChF,4BACE,0BACGT,EAAMU,MADT,KACkBV,EAAMW,aAAaC,OAAO,EAAG,GAD/C,QAGA,yCAAsC,GAArBZ,EAAMa,cAAmBC,QAAQ,GAAlD,SACA,sCACA,uBAAId,EAAMe,YACV,oCACA,uBAAIf,EAAMgB,OAAOC,KAAI,SAAAC,GAAK,OAAK,4BAAsBA,EAAMC,KAA5B,MAAWD,EAAMpB,GAAtB,WAKjC,E,QCDD,EAxBsB,WAAO,IAAD,IAClBsB,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,EAAY,oBAAGF,EAASG,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAC7C,OACE,6BACE,UAAC,KAAD,CAAMC,GAAIH,EAAV,WAAwB,SAAC,MAAD,IAAxB,cACA,SAAC3B,EAAD,CAAWC,GAAIsB,KACf,UAAC,KAAD,YACE,SAAC,KAAD,sCACF,UAAC,KAAD,YACE,yBACE,SAAC,KAAD,CAAMO,GAAG,OAAOF,MAAO,CAACC,KAAKJ,EAASG,MAAMC,MAA5C,qBAEF,yBACE,SAAC,KAAD,CAAMC,GAAI,UAAUF,MAAO,CAACC,KAAKJ,EAASG,MAAMC,MAAhD,8BAIJ,SAAC,KAAD,MAGL,C","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.section`\n  display: flex;\n  justify-content: center;\n  gap: ${props => props.theme.space[4]}px;\n  padding-bottom: ${props => props.theme.space[3]}px;\n  border-bottom: ${props => props.theme.space[1]}px solid black;\n`;\n\nexport const CardWrapper = styled.div`\n  border: ${props => props.theme.space[1]}px solid black;\n  border-radius: ${props => props.theme.space[2]}px;\n\n  > a {\n    text-decoration: none;\n  }\n`;\n","import { useState, useEffect } from \"react\";\nimport { getMovieById } from \"MovieApi\";\nimport { Container } from \"./MovieCard.styled\";\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({id}) => {\n  const [movie, setMovie] = useState(null);\n\n    useEffect(() => {\n    getMovieById(id).then(data => {\n    setMovie(data);\n  });\n    }, [id]);\n \n  return (\n    (movie &&  <Container >\n      <img src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt=\"\" height='350'/>\n      <div>\n        <h2>\n          {movie.title} ({movie.release_date.substr(0, 4)})\n        </h2>\n        <p>User Score: {(movie.vote_average * 10).toFixed(0)} %</p>\n        <h3>Overview</h3>\n        <p>{movie.overview}</p>\n        <h3>Genres</h3>\n        <p>{movie.genres.map(genre => (<span key={genre.id}>{genre.name} </span>) )}</p>\n      </div>\n    </Container>)\n   \n  );\n};\n\nMovieCard.propTypes = {\n      id: PropTypes.string.isRequired,\n};","import { Outlet,useParams, useLocation  } from \"react-router-dom\";\nimport { HiChevronLeft } from 'react-icons/hi';\nimport { MovieCard } from \"components/MovieCard/MovieCard\";\nimport { Container, AddTitle, AddList, Link } from \"pages/pages.styled\";\n\n const MovieDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? \"/\";\n  return (\n    <main>\n      <Link to={backLinkHref}><HiChevronLeft/>Go back</Link>\n      <MovieCard id={movieId} />\n      <Container>\n        <AddTitle>Additional information</AddTitle>\n      <AddList>\n        <li>\n          <Link to=\"cast\" state={{from:location.state.from}}>Cast</Link>\n        </li>\n        <li>\n          <Link to= \"reviews\" state={{from:location.state.from}}>Reviews</Link>\n        </li>\n        </AddList>\n      </Container>\n      <Outlet />\n    </main>\n  );\n};\n\nexport default MovieDetails;"],"names":["Container","styled","props","theme","space","MovieCard","id","useState","movie","setMovie","useEffect","getMovieById","then","data","src","poster_path","alt","height","title","release_date","substr","vote_average","toFixed","overview","genres","map","genre","name","movieId","useParams","location","useLocation","backLinkHref","state","from","to"],"sourceRoot":""}